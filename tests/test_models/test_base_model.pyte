#!/usr/bin/python3
"""
Unit tests for the BaseModel class.
"""

import unittest
from models.base_model import BaseModel


class TestBaseModel(unittest.TestCase):
    """
    Test cases for the BaseModel class.
    """

    def test_attributes(self):
        """
        Test BaseModel instance attributes.
        """
        my_model = BaseModel()
        self.assertTrue(hasattr(my_model, "id"))
        self.assertTrue(hasattr(my_model, "created_at"))
        self.assertTrue(hasattr(my_model, "updated_at"))

    def test_str(self):
        """
        Test __str__ method.
        """
        my_model = BaseModel()
        self.assertEqual(str(my_model), f"[BaseModel] ({my_model.id}) "
                                        f"{my_model.__dict__}")

    def test_save(self):
        """
        Test save method.
        """
        my_model = BaseModel()
        updated_at_before = my_model.updated_at
        my_model.save()
        self.assertNotEqual(updated_at_before, my_model.updated_at)

    def test_to_dict(self):
        """
        Test to_dict method.
        """
        my_model = BaseModel()
        my_model_dict = my_model.to_dict()
        self.assertEqual(my_model_dict['__class__'], "BaseModel")
        self.assertTrue("id" in my_model_dict)
        self.assertTrue("created_at" in my_model_dict)
        self.assertTrue("updated_at" in my_model_dict)

    def test_from_dict(self):
        """
        Test from_dict method.
        """
        my_model = BaseModel()
        my_model_dict = my_model.to_dict()
        new_model = BaseModel(**my_model_dict)
        self.assertEqual(type(new_model), BaseModel)
        self.assertEqual(new_model.id, my_model.id)
        self.assertEqual(new_model.created_at, my_model.created_at)
        self.assertEqual(new_model.updated_at, my_model.updated_at)


if __name__ == '__main__':
    unittest.main()
